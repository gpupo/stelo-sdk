#!/usr/bin/env php
<?php

/*
 * This file is part of gpupo/stelo-sdk
 *
 * (c) Gilmar Pupo <g@g1mr.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * For more information, see
 * <http://www.g1mr.com/stelo-sdk/>.
 */

require __DIR__.'/../vendor/autoload.php';

use Gpupo\SteloSdk\Console\Application;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

$app = new Application('stelo-sdk');
$app->findConfig([__DIR__.'/../']);

$transaction_find_parameters = [[
    'key'   => 'transaction_id',
]];

$app->register('transaction:find')
    ->setDescription('Consulta de transação')
    ->setDefinition($app->factoryDefinition($transaction_find_parameters))
    ->setCode(function (InputInterface $input, OutputInterface $output) use ($app, $transaction_find_parameters) {
        $list = $app->processInputParameters($transaction_find_parameters, $input, $output);
        $transaction = $app->factorySdk($list)->factoryManager('transaction')->findById($list['transaction_id']);

        if ($transaction) {
            $output->writeln('<info>Successo!</info>');
            $output->writeln($transaction->getStatusCode());
            $output->writeln($transaction->getStatusMessage());
            $output->writeln($transaction->getAmount());
        } else {
            $output->writeln('<error>Transação não encontrada.</error>');
        }
    });

$transaction_create_parameters = [[
    'key'   => 'order_json_file',
]];

$app->register('transaction:create')
    ->setDescription('Cria uma transação')
    ->setDefinition($app->factoryDefinition($transaction_create_parameters))
    ->setCode(function (InputInterface $input, OutputInterface $output) use ($app, $transaction_create_parameters) {
        $list = $app->processInputParameters($transaction_create_parameters, $input, $output);
        $steloSdk = $app->factorySdk($list);
        $data = json_decode(file_get_contents($list['order_json_file']), true);
        $order = $steloSdk->createOrder($data);
        $manager = $steloSdk->factoryManager('transaction');
        $transaction = $manager->createFromOrder($order);

        if ($transaction) {
            $output->writeln('<info>Successo!</info>');
            $output->writeln('Transação <info>'.$transaction->getId().'</info>');
            $output->writeln('Checkout Url <info>'.$transaction->getCheckoutUrl().'</info>');
        } else {
            $output->writeln('<error>Erro na criação da transação</error>');
        }
    });

$app->register('login:init')
    ->setDescription('Url para início de login')
    ->setDefinition($app->factoryDefinition())
    ->setCode(function (InputInterface $input, OutputInterface $output) use ($app) {
        $list = $app->processInputParameters([], $input, $output);
        $auth = $app->factorySdk($list)->factoryManager('auth');
        $csrfToken = $auth->getCsrfToken();
        $url = $auth->getAuthorizeUrl();
        $output->writeln("URL:\n<info>$url</info>");
    });

$token_parameters = [[
    'key'   => 'code',
]];

$app->register('login:token')
    ->setDescription('Solicita token')
    ->setDefinition($app->factoryDefinition($token_parameters))
    ->setCode(function (InputInterface $input, OutputInterface $output) use ($app,$token_parameters) {
        $list = $app->processInputParameters($token_parameters, $input, $output);
        $token = $app->factorySdk($list)->factoryManager('auth')->requestToken($list['code']);
        $output->writeln("Token: <info>".$token->getAccessToken()."</info>");
        $output->writeln("Type: <info>".$token->getTokenType()."</info>");
    });


$request_parameters = [[
    'key'   => 'token',
]];

$app->register('login:request')
    ->setDescription('Solicita dados do Cliente')
    ->setDefinition($app->factoryDefinition($request_parameters))
    ->setCode(function (InputInterface $input, OutputInterface $output) use ($app, $request_parameters) {
        $list = $app->processInputParameters($request_parameters, $input, $output);
        $steloSdk = $app->factorySdk($list);
        $auth = $steloSdk->factoryManager('auth');
        $token = $steloSdk->createToken([
            'access_token'  => $list['token'],
            'token_type'    => 'Bearer',
        ]);

        $customer = $auth->requestCustomer($token);
        $output->writeln("Nome: <info>".$customer->getCustomerName()."</info>");
        $output->writeln("Email: <info>".$customer->getCustomerEmail()."</info>");
        $output->writeln("CPF: <info>".$customer->getCpf()."</info>");
    });

$app->run();
